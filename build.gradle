plugins {
	id 'java'
	id 'application'
	id 'org.panteleyev.jpackageplugin' version '1.6.0'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
}
group 'smlauncher'
mainClassName = 'smlauncher.StarMadeLauncher'
version = '3.1.3'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(18)
	}
}

application {
	mainClassName = 'smlauncher.StarMadeLauncher'
//	mainModule = 'smlauncher'
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url "https://plugins.gradle.org/m2/" }
	gradlePluginPortal()
}

dependencies {
	implementation 'com.formdev:flatlaf:3.5.1'
	implementation 'commons-io:commons-io:2.16.1'
	implementation 'it.unimi.dsi:fastutil:8.5.14'
	implementation 'org.codehaus.plexus:plexus-archiver:4.10.0'
	implementation 'org.jasypt:jasypt:1.9.3'
	implementation 'org.json:json:20240303'
	implementation 'org.panteleyev:jpackage-gradle-plugin:1.6.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.0'
}

var os = System.getProperty('os.name').toLowerCase()
if (os.contains('win')) {
	os = 'windows'
} else if (os.contains('mac')) {
	os = 'macos'
} else {
	os = 'linux'
}

// Tasks

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion = "8.10.1"
    distributionType = Wrapper.DistributionType.BIN
}

jar {
	manifest {
		attributes 'Main-Class': 'smlauncher.StarMadeLauncher'
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	archiveFileName = 'StarMade-Launcher.jar'
	from(sourceSets.main.output)
	from('resources/Updater.jar') {
		into 'Updater.jar'
	}
}

clean {
	delete 'release-builds'
}

jpackage {
	dependsOn(clean, jar)
	input = "./build/libs/"
	destination = "./release-builds/" + os
	mainJar = "StarMade-Launcher.jar"
	mainClass = "smlauncher.StarMadeLauncher"
	appName = "StarMade-Launcher"
	appVersion = project.version.toString()
	vendor = "Schine GmbH"
	copyright = "Copyright (c) 2024 Schine GmbH"
	runtimeImage = System.getProperty("java.home")
	type = "app-image"
	mac {
		icon = "./src/main/resources/starmade.icns"
	}
	windows {
		icon = "./src/main/resources/starmade.ico"
	}
	linux {
		icon = "./src/main/resources/starmade.png"
	}
}

tasks.register('package') {
	dependsOn(jpackage)
	doLast {
		delete fileTree('release-builds/' + os).matching {
			include '**/*.ico'
			include '**/*.icns'
			include '**/*.png'
		}
		if (os == 'windows') {
			copy {
				from 'StarMade-dedicated-server-windows.bat'
				into 'release-builds/' + os + '/StarMade-Launcher/'
			}
		}
		if (os == 'macos') {
			ant.move(file: 'release-builds/' + os + '/StarMade-Launcher.app', toFile: 'release-builds/' + os + '/StarMade-Launcher/StarMade-Launcher.app')
			copy {
				from 'StarMade-dedicated-server-macos.command'
				into 'release-builds/' + os + '/StarMade-Launcher/'
			}
		}
		if (os == 'linux') {
			copy {
				from 'StarMade-dedicated-server-linux.sh'
				into 'release-builds/' + os + '/StarMade-Launcher/'
			}
		}
	}
}
